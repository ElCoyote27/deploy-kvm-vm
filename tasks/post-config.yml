---
- name: add host to inventory
  lineinfile:
    path: "{{ inventory_file }}"
    line: "{{ vm_name }}   ansible_host={{ vm_ip }} ansible_user={{ admin_user }}"
    insertafter: '^\[{{ inventory_group }}\]'
    state: present
  register: update_inventory
  when: update_inventory and vm_ip is defined

- name: ensure host is added to inventory and its a single entry
  lineinfile:
    path: "{{ inventory_file }}"
    regexp: "^{{ vm_name }}"
    backrefs: yes
    line: "{{ vm_name }}   ansible_host={{ vm_ip }} ansible_user={{ admin_user }}"
    insertafter: '^\[{{ inventory_group }}\]'
    state: present
  register: ensure_inventory
  when: update_inventory.changed

- name: refresh local static inventory
  meta: refresh_inventory

- name: get vm gateway when using dhcp client
  shell: |
       ip route get 8.8.8.8|awk '/via/ {print $3}'
  delegate_to: "{{ vm_name }}"
  when: vm_gateway is not defined
  changed_when: false
  register: gateway

- set_fact:
    vm_gateway: "{{ gateway.stdout }}"
  when: gateway is defined

- name: ensure cloud-init is removed
  yum:
    name: cloud-init
    state: absent
  delegate_to: "{{ vm_name }}"
  when: vm_ip is defined

- name: change DHCP provided ip to static config
  template:
    src: ifcfg.j2
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ vm_nic.stdout }}"
  delegate_to: "{{ vm_name }}"
  register: upload_ifcfg
  when: vm_ip is defined

- name: restart {{ vm_name }} network service
  shell: "(sleep 1; ifdown {{ vm_nic.stdout }} && ifup {{ vm_nic.stdout }} )&"
  become: yes
  args:
    warn: no
  async: 100
  poll: 0
  changed_when: false
  delegate_to: "{{ vm_name }}"
  when: upload_ifcfg.changed

- name: Wait for the hosts network interface to come back up
  wait_for:
    host: "{{ vm_ipaddress }}"
    port: 22
    search_regex: OpenSSH
    delay: 10
  when: upload_ifcfg.changed

- name: update host inventory ip address when user provided ip address
  lineinfile:
    path: "{{ inventory_file }}"
    regexp: "^{{ vm_name }}"
    backrefs: yes
    line: "{{ vm_name }}   ansible_host={{ vm_ip }} ansible_user={{ admin_user }}"
    insertafter: '^\[{{ inventory_group }}\]'
    state: present
  register: ensure_inventory

- name: refresh local static inventory
  meta: refresh_inventory

- name: make sure resolv.conf is updated
  find:
    paths: /etc/
    contains: '^nameserver ([0-9]{1,3}\.){1,3}[0-9]{1,3}$'
    patterns: "resolv.conf"
  register: resolv_conf_entries
  delegate_to: "{{ vm_name }}"
  become: yes

- name: check for dns lookup
  command: getent ahosts www.cnet.com
  failed_when: false
  changed_when: false
  register: dns_lookup_result
  delegate_to: "{{ vm_name }}"
  become: yes

- name: update {{ vm_name }} /etc/resolv.conf
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
  when: (vm_ip is defined and vm_ip != "" and resolv_conf_entries.matched == 0)
        or
        (vm_ip is defined and vm_ip != "" and dns_lookup_result.rc == 2)
  delegate_to: "{{ vm_name }}"