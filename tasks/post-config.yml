---
- name: add host to inventory
  lineinfile:
    path: "{{ inventory_file }}"
    line: "{{ vm_name }}   ansible_host={{ vm_ip }} ansible_user={{ admin_user }}"
    insertafter: '^\[{{ inventory_group }}\]'
    state: present
  register: update_inventory
  when: update_inventory and vm_ip is defined

- name: ensure host is added to inventory and its a single entry
  lineinfile:
    path: "{{ inventory_file }}"
    regexp: "^{{ vm_name }}"
    backrefs: yes
    line: "{{ vm_name }}   ansible_host={{ vm_ip }} ansible_user={{ admin_user }}"
    insertafter: '^\[{{ inventory_group }}\]'
    state: present
  register: ensure_inventory
  when: update_inventory.changed

- name: refresh local static inventory
  meta: refresh_inventory

#- name: restarting {{ vm_name }}
#  command

- name: ensure cloud-init is removed
  yum:
    name: cloud-init
    state: absent
  delegate_to: "{{ vm_name }}"
  when: vm_ip is defined

- name: update host inventory ip address when user provided ip address
  lineinfile:
    path: "{{ inventory_file }}"
    regexp: "^{{ vm_name }}"
    backrefs: yes
    line: "{{ vm_name }}   ansible_host={{ vm_ip }} ansible_user={{ admin_user }}"
    insertafter: '^\[{{ inventory_group }}\]'
    state: present
  register: ensure_inventory

- name: refresh local static inventory
  meta: refresh_inventory

- name: make sure resolv.conf is updated
  find:
    paths: /etc/
    contains: '^nameserver ([0-9]{1,3}\.){1,3}[0-9]{1,3}$'
    patterns: "resolv.conf"
  register: resolv_conf_entries
  delegate_to: "{{ vm_name }}"
  become: yes

- name: check for dns lookup
  command: getent ahosts www.cnet.com
  failed_when: false
  changed_when: false
  register: dns_lookup_result
  delegate_to: "{{ vm_name }}"
  become: yes

- name: include dhcp_to_static task
  import_tasks: dhcp_to_static.yml
  when: not static_ip|bool

- name: update {{ vm_name }} /etc/resolv.conf
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
  when: (vm_ip is defined and vm_ip != "" and resolv_conf_entries.matched == 0)
        or
        (vm_ip is defined and vm_ip != "" and dns_lookup_result.rc == 2)
  delegate_to: "{{ vm_name }}"