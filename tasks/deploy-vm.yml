---
- name: Get a list of all instances
  virt:
    command: list_vms
  register: all_instances

- name: Check if qcow OS image template exist
  stat:
    path: "{{ os_qcow_template }}"
  delegate_to: "{{ kvm_install_host }}"
  register: cloud_init_image_exist

- name: Fail play if VM exist and vm_recreate is false
  fail:
    msg: "The vm exist and vm_recreate is false"
  when: vm_name in all_instances.list_vms and not vm_recreate|bool

# TODO: add task to exit if cloud_jnit_image_exist.stat.exists is false

# TODO: verify all disk are also removed
- name: Undefine existing VM to recreate it
  virt:
    name: "{{ vm_name }}"
    command: destroy
  when: vm_name in all_instances.list_vms and vm_recreate|bool

- name: Copy cloud-init user data
  template: 
    src: user-data.j2 
    dest: "{{ cloud_init_user_data }}"
    mode: 0777
  register: cloud_intit_user_data
  delegate_to: "{{ kvm_install_host }}"

- name: Generate cloud-init meta data
  copy:
    dest: "{{ cloud_init_meta_data }}"
    content: |
      instance-id: {{ vm_name }}
      hostname: {{ vm_hostname }}
      local-hostname: {{ vm_local_hostname }}
  delegate_to: "{{ kvm_install_host }}"

- name: Create operating system disk for vm
  command: "qemu-img create -f qcow2 {{ os_disk }} {{ vm_root_disk_size }}"
  args:
    creates: "{{ os_disk }}"
  register: os_disk_results

- name: Verify operating system disk for vm exists
  stat:
    path: "{{ os_disk }}"
  delegate_to: "{{ kvm_install_host }}"
  register: os_disk_created

# TODO: add play to exit if OS disk could not be found

- name: Push base image onto vm operating system disk
  command: >
    virt-resize --expand /dev/sda1 "{{ os_qcow_template }}" "{{ os_disk }}"
  register: resize_os_disk_results
  when: os_disk_created.stat.exists
  changed_when: '"Resize operation completed with no errors" in resize_os_disk_results.stdout'

- name: Grow root file system to size of disk
  command: "virt-customize -a {{ os_disk }} --run-command 'xfs_growfs /'"
  when: os_disk_created.stat.exists
  register: grow_os_disk_results
  changed_when: '"Finishing off" in grow_os_disk_results.stdout'

- name: check for existing cloud init iso
  stat:
    path: "{{ cloud_init_iso_image }}"
    get_checksum: no
    get_md5: no
    get_mime: no
    get_attributes: no
  register: cloud_init_iso
    
- name: Create iso image for cloud init
  shell: "genisoimage -output {{ cloud_init_iso_image }} -volid cidata -joliet -r {{ cloud_init_user_data }} {{ cloud_init_meta_data }}"
  when: cloud_intit_user_data.changed or cloud_init_iso.stat.exists == False
  delegate_to: "{{ kvm_install_host }}"

- name: generate virt-install command arguments
  template: 
    src: virt-install-cmd.j2
    dest: "{{ vm_virtinstall_script }}"
    mode: 0755
  delegate_to: "{{ kvm_install_host }}"

- name: deploy VM instance
  command: "{{ vm_virtinstall_script }}"
  when: vm_name not in all_instances.list_vms
  register: deploy_vm
  failed_when: "('Domain installation does not' in deploy_vm.stderr) or
                ('failed to' in deploy_vm.stderr) or
                ('ERROR' in deploy_vm.stderr)"
  changed_when: "'Domain creation completed' in deploy_vm.stdout_lines"
 
- debug:
    msg: "{{ deploy_vm }}" 

- name: create extra qcow disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow"
    disk_opt: "cluster_size=128K"
  command: >
    qemu-img create -f qcow2 -o "{{ disk_opt }}" "{{ disk_name }}" "{{ item.size }}"
  args:
    creates: "{{ disk_name }}"
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  register: extra_disk_created

- name: Attach External Disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow"
    disk: "vd{{ disk_sequence[item | int + count ] }}"
  command: >
    virsh attach-disk {{ vm_name }} {{ disk_name }} {{ disk }} --live --persistent
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  delegate_to: "{{ kvm_install_host }}"

#- name: Get MAC address
#  shell: >
#     virsh --connect qemu:///system dumpxml {{ vm_name }} | awk -F\' '/mac address/ {print $2}'
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  register: mac_info
#
#- name: Gather bridge device name
#  shell: >
#    virsh --connect qemu:///system net-info {{ vm_network_br }}|grep Bridge|awk '{print $2}'
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  register: vm_network_br_dev_name
#
#- name: Gather IP address of the VM
#  shell: |
#     #!/bin/sh
#     for i in {1..5}
#     do
#     ITEM=$(virsh qemu-agent-command   {{ vm_name }} '{"execute":"guest-network-get-interfaces"}' |  grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | head -2 | tail -1)
#     if [ -z "${ITEM}" ]; then
#       sleep 30s
#     else
#       echo $ITEM
#       break
#     fi
#     done
#     exit 0
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  register: vm_ip
#
#- name: Save {{ vm_ip }} to file
#  local_action: copy content={{ vm_ip.stdout_lines }} dest={{inventory_dir}}/{{vm_name}}
#
#- name: Enable KVM autostart feature
#  command: >
#     virsh autostart {{ vm_name }}
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#
#- name: Eject CD-Rom
#  shell: "virsh --connect qemu:///system change-media {{ vm_name }} hda --eject --config"
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#
#
#
## - name: Clean up cloud init files
##   file: state=absent path="{{ item }}"
##   with_items:
##   - "{{ cloud_init_user_data }}"
##   - "{{ cloud_init_iso_image }}"
##   become: yes
##   delegate_to: "{{ kvm_install_host }}"
