---
- name: get a list of all instances
  virt:
    command: list_vms
  register: all_instances

- name: check if instance exist
  debug:
    msg: "{{ all_instances }}"
  when: vm_name in all_instances.list_vms

- name: If vm exist and vm_recreate is false, playbook fails
  fail:
    msg: "The vm exist and vm_recreate is false"
  when: vm_name in all_instances.list_vms and not vm_recreate|bool

- name: Undefine existing VM to recreate it
  virt:
    name: "{{ vm_name }}"
    command: destroy
  when: vm_name in all_instances.list_vms and vm_recreate|bool

- name: Check if qcow os image exist.
  stat:
    path: "{{ kvm_vm_pool_dir }}/{{ cloud_init_vm_image }}"
  delegate_to: "{{ kvm_install_host }}"
  register: cloud_init_image_exist

- name: Copy cloud-init user data
  template: 
    src: user-data.j2 
    dest: "{{ cloud_init_user_data }}"
    mode: 0777
  register: cloud_intit_user_data
  delegate_to: "{{ kvm_install_host }}"

- name: Generate cloud-init meta data
  copy:
    dest: "{{ cloud_init_meta_data }}"
    content: |
      instance-id: {{ vm_name }}
      hostname: {{ vm_hostname }}
      local-hostname: {{ vm_local_hostname }}
  delegate_to: "{{ kvm_install_host }}"

- name: Check if operating system disk already exists
  stat:
    path: "{{ kvm_vm_pool_dir }}/{{ vm_name }}.qcow2"
    get_checksum: no
    get_md5: no
    get_mime: no
    get_attributes: no
  register: os_disk_file
 
- name: Create operating system disk for vm
  command: "qemu-img create -f qcow2 {{ kvm_vm_pool_dir }}/{{ vm_name }}.qcow2 {{ vm_root_disk_size }}"
  register: os_disk_results
  when: os_disk_file.stat.exists == False and vm_name not in all_instances.list_vms
  changed_when: '"Formatting" in os_disk_results.stdout'

- name: Push base image onto vm operating system disk
  command: >
    virt-resize --expand /dev/sda1 {{ kvm_vm_pool_dir }}/{{ cloud_init_vm_image }}
    {{ kvm_vm_pool_dir }}/{{ vm_name }}.qcow2
  register: resize_os_disk_results
  when: os_disk_file.stat.exists == False and vm_name not in all_instances.list_vms
  changed_when: '"Resize operation completed with no errors" in resize_os_disk_results.stdout'

- name: Grow root file system to size of disk
  command: "virt-customize -a {{ kvm_vm_pool_dir }}/{{ vm_name }}.qcow2 --run-command 'xfs_growfs /'"
  when: os_disk_file.stat.exists == False and vm_name not in all_instances.list_vms
  register: grow_os_disk_results
  changed_when: '"Finishing off" in grow_os_disk_results.stdout'

#- name: Create root disk based on cloud init img
#  command: "qemu-img create -f qcow2 {{ kvm_vm_pool_dir }}/{{ cloud_init_vm_image }} {{ kvm_vm_pool_dir }}/{{ vm_name }}.qcow2 {{ vm_root_disk_size }}"
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#

- name: check for existing cloud init iso
  stat:
    path: "{{ cloud_init_iso_image }}"
    get_checksum: no
    get_md5: no
    get_mime: no
    get_attributes: no
  register: cloud_init_iso
    
- name: Create iso image for cloud init
  shell: "genisoimage -output {{ cloud_init_iso_image }} -volid cidata -joliet -r {{ cloud_init_user_data }} {{ cloud_init_meta_data }}"
  when: cloud_intit_user_data.changed or cloud_init_iso.stat.exists == False
  delegate_to: "{{ kvm_install_host }}"

- name: generate virt-install command arguments
  template: 
    src: virt-install-cmd.j2
    dest: "{{ vm_virtinstall_script }}"
    mode: 0777
  delegate_to: "{{ kvm_install_host }}"

#
#- name: Create External Disk
#  command: >
#     dd if=/dev/zero of=/{{ kvm_vm_pool_dir }}/{{ vm_name }}_disk.img bs=1 count=0  seek={{ ext_block_size }}
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  when: externalstorage
#
#- name: Attach External Disk
#  command: >
#    virsh attach-disk {{ vm_name }} /{{ kvm_vm_pool_dir }}/{{ vm_name }}_disk.img vdb --live --persistent
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  when: externalstorage
#
#- name: Create External Disk for glusterFS
#  command: >
#     dd if=/dev/zero of=/{{ kvm_vm_pool_dir }}/{{ vm_name }}_gluster.img  bs=1 count=0  seek={{ gluster_block_size }}
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  when: glusterstorage
#
#- name: Attach External Disk  for glusterFS
#  command: >
#    virsh attach-disk {{ vm_name }} /{{ kvm_vm_pool_dir }}/{{ vm_name }}_gluster.img vdc --live --persistent
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  when: glusterstorage
#
#- name: Get MAC address
#  shell: >
#     virsh --connect qemu:///system dumpxml {{ vm_name }} | awk -F\' '/mac address/ {print $2}'
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  register: mac_info
#
#- name: Gather bridge device name
#  shell: >
#    virsh --connect qemu:///system net-info {{ vm_network_br }}|grep Bridge|awk '{print $2}'
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  register: vm_network_br_dev_name
#
#- name: Gather IP address of the VM
#  shell: |
#     #!/bin/sh
#     for i in {1..5}
#     do
#     ITEM=$(virsh qemu-agent-command   {{ vm_name }} '{"execute":"guest-network-get-interfaces"}' |  grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | head -2 | tail -1)
#     if [ -z "${ITEM}" ]; then
#       sleep 30s
#     else
#       echo $ITEM
#       break
#     fi
#     done
#     exit 0
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#  register: vm_ip
#
#- name: Save {{ vm_ip }} to file
#  local_action: copy content={{ vm_ip.stdout_lines }} dest={{inventory_dir}}/{{vm_name}}
#
#- name: Enable KVM autostart feature
#  command: >
#     virsh autostart {{ vm_name }}
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#
#- name: Eject CD-Rom
#  shell: "virsh --connect qemu:///system change-media {{ vm_name }} hda --eject --config"
#  become: yes
#  delegate_to: "{{ kvm_install_host }}"
#
#
#
## - name: Clean up cloud init files
##   file: state=absent path="{{ item }}"
##   with_items:
##   - "{{ cloud_init_user_data }}"
##   - "{{ cloud_init_iso_image }}"
##   become: yes
##   delegate_to: "{{ kvm_install_host }}"
